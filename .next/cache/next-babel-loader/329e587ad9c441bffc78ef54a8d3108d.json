{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport Product, { ITEM_WIDTH } from '../../containers/main/Product';\nimport { lightGrayColor } from '../../styles/style';\nimport { ArrowNext } from '../common/ArrowNext';\nimport { ArrowPrevious } from '../common/ArrowPrevious';\nconst Container = styled.div.withConfig({\n  displayName: \"ProductList__Container\",\n  componentId: \"v0uq4f-0\"\n})([\"display:flex;width:100%;background-color:\", \";overflow:hidden;flex-direction:row;position:relative;\"], lightGrayColor);\nconst Content = styled.div.withConfig({\n  displayName: \"ProductList__Content\",\n  componentId: \"v0uq4f-1\"\n})([\"white-space:nowrap;overflow:hidden;margin:10px 30px;height:310px;display:flex;align-items:center;\"]);\nconst ProductWrapper = styled.div.withConfig({\n  displayName: \"ProductList__ProductWrapper\",\n  componentId: \"v0uq4f-2\"\n})([\"margin:0 10px;transform:translateX(-\", \"px);transition:transform 0.5s ease;\"], props => props.indent);\nconst Arrow = styled.div.withConfig({\n  displayName: \"ProductList__Arrow\",\n  componentId: \"v0uq4f-3\"\n})([\"position:absolute;top:50%;transform:translateY(-50%);left:\", \";right:\", \";\"], props => props.next ? undefined : 0, props => props.next ? 0 : undefined);\n\nconst ProductList = ({\n  products\n}) => {\n  const contentRef = useRef();\n  const {\n    0: scrollIndex,\n    1: setScrollIndex\n  } = useState(0);\n  const {\n    0: itemCount,\n    1: setItemCount\n  } = useState(0);\n  const maxProductCount = useMemo(() => products.length - 1, [products.length]);\n  const maxScrollIndex = useMemo(() => Math.floor(maxProductCount / itemCount), [maxProductCount, itemCount]);\n  const isShowPrevious = useMemo(() => scrollIndex > 0, [scrollIndex]);\n  const isShowNext = useMemo(() => scrollIndex < maxScrollIndex, [scrollIndex, maxScrollIndex]);\n  const snapIndent = useMemo(() => ITEM_WIDTH + 20, []);\n  const clickPrevious = useCallback(() => {\n    setScrollIndex(prev => prev - 1 < 0 ? 0 : prev - 1);\n  }, []);\n  const clickNext = useCallback(() => {\n    setScrollIndex(prev => prev + 1 > maxScrollIndex ? maxScrollIndex : prev + 1);\n  }, [maxScrollIndex]);\n  const updateItemCount = useCallback(() => {\n    if (contentRef !== null && contentRef !== void 0 && contentRef.current) {\n      setItemCount(Math.floor(contentRef.current.offsetWidth / snapIndent));\n    }\n  }, [contentRef === null || contentRef === void 0 ? void 0 : contentRef.current, snapIndent]);\n  useEffect(() => {\n    window.addEventListener('resize', updateItemCount);\n    return () => {\n      window.removeEventListener('resize', updateItemCount);\n    };\n  }, []);\n  useEffect(() => {\n    updateItemCount();\n  }, []);\n  return __jsx(Container, null, isShowPrevious && __jsx(Arrow, {\n    next: false,\n    onClick: clickPrevious\n  }, __jsx(ArrowPrevious, null)), isShowNext && __jsx(Arrow, {\n    next: true,\n    onClick: clickNext\n  }, __jsx(ArrowNext, null)), __jsx(Content, {\n    ref: contentRef\n  }, products.map(product => __jsx(ProductWrapper, {\n    key: product.id,\n    indent: snapIndent * itemCount * scrollIndex\n  }, __jsx(Product, {\n    product: product\n  })))));\n};\n\nexport default ProductList;","map":null,"metadata":{},"sourceType":"module"}