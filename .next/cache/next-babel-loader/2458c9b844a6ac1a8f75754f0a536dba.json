{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Router from 'next/router';\nimport ShopItemsLoading from '../../components/shop/ShopItemsLoading';\nimport ShopItemsComp from '../../components/shop/ShopItmes';\nimport ShopItemDetailComp from '../../components/shop/ShopItemDetail';\nimport ShopItemsByClassified from '../../components/shop/ShopItemsByClassified';\n\nconst ShopItems = ({\n  shopId,\n  products,\n  classifiedId,\n  productId\n}) => {\n  const {\n    0: productsByClassify,\n    1: setProductsByClassify\n  } = useState({});\n  const {\n    0: selectedProducts,\n    1: setSelectedProducts\n  } = useState([]);\n  const {\n    0: sortedSelectedProducts,\n    1: setSortedSelectedProducts\n  } = useState([]);\n  const {\n    0: selectedProduct,\n    1: setSelectedProduct\n  } = useState(null);\n  const {\n    0: isSortByTitle,\n    1: setIsSortByTitle\n  } = useState(false);\n  const getSelectedProduct = useCallback((candidates, id) => Object.values(candidates).filter(product => {\n    if (product) {\n      return product.id === id;\n    }\n  }), []);\n  const clickClassify = useCallback(classify => {\n    setSelectedProducts([...productsByClassify[classify]]);\n    setSortedSelectedProducts([...productsByClassify[classify]]);\n    Router.push({\n      pathname: '/shop',\n      query: {\n        id: shopId,\n        classifiedId: encodeURI(classify)\n      }\n    });\n  }, [shopId, productsByClassify]);\n  const clickProduct = useCallback(id => {\n    const selectedProductArr = getSelectedProduct(sortedSelectedProducts, id);\n    setSelectedProduct(selectedProductArr[0]);\n    Router.push({\n      pathname: '/shop',\n      query: {\n        id: shopId,\n        classifiedId: encodeURI(classifiedId),\n        productId: selectedProductArr[0].id\n      }\n    });\n  }, [shopId, classifiedId, sortedSelectedProducts]);\n\n  const sortByTitle = () => {\n    const newProducts = [...sortedSelectedProducts];\n    newProducts.sort((a, b) => {\n      if (isSortByTitle) {\n        if (a.title < b.title) {\n          return 1;\n        }\n\n        if (a.title > b.title) {\n          return -1;\n        }\n      } else {\n        if (a.title < b.title) {\n          return -1;\n        }\n\n        if (a.title > b.title) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n    setIsSortByTitle(!isSortByTitle);\n    setSortedSelectedProducts(newProducts);\n  };\n\n  const getItemNumber = product => {\n    if (product.specification) {\n      return `${product.specification[0].number.split('-')[0]}-${product.specification[0].number.split('-')[1]}`;\n    }\n\n    return '';\n  };\n\n  const findByText = findedText => {\n    const lowerText = findedText.toLowerCase();\n    const newProducts = products.filter(product => {\n      if (product.title.toLowerCase().indexOf(lowerText) > -1) {\n        return true;\n      }\n\n      if (getItemNumber(product).toLowerCase().indexOf(lowerText) > -1) {\n        return true;\n      }\n\n      return false;\n    });\n    setSortedSelectedProducts(newProducts);\n  };\n\n  const setInitItems = () => {\n    setSortedSelectedProducts([...selectedProducts]);\n    setIsSortByTitle(false);\n  };\n\n  useEffect(() => {\n    const classifiedProducts = products.reduce((acc, cur) => {\n      if (cur) {\n        if (cur.classify) {\n          if (acc[cur.classify]) {\n            acc[cur.classify].push(cur);\n          } else {\n            acc[cur.classify] = [cur];\n          }\n        }\n      }\n\n      return acc;\n    }, {});\n\n    if (productId) {\n      const selectedProductArr = getSelectedProduct(products, productId);\n      setSelectedProduct(selectedProductArr[0]);\n    }\n\n    if (classifiedId && classifiedProducts[classifiedId]) {\n      setSelectedProducts([...classifiedProducts[classifiedId]]);\n      setSortedSelectedProducts([...classifiedProducts[classifiedId]]);\n    }\n\n    setProductsByClassify(classifiedProducts);\n  }, [shopId, products]);\n\n  const renderShops = () => {\n    if (!products || products.length < 1) {\n      return __jsx(ShopItemsLoading, null);\n    }\n\n    if (classifiedId && productId && selectedProduct) {\n      return __jsx(ShopItemDetailComp, {\n        type: selectedProduct.type,\n        id: selectedProduct.id,\n        image: selectedProduct.image,\n        title: selectedProduct.title,\n        content: selectedProduct.content,\n        specification: selectedProduct.specification,\n        tableItems: selectedProduct.tableItems || [],\n        classifiedId: selectedProduct.classify\n      });\n    }\n\n    if (classifiedId) {\n      return __jsx(ShopItemsComp, {\n        products: sortedSelectedProducts,\n        onClickProduct: clickProduct,\n        sortByTitle: sortByTitle,\n        isSortByTitle: isSortByTitle,\n        findByText: findByText,\n        setInitItems: setInitItems\n      });\n    }\n\n    return __jsx(ShopItemsByClassified, {\n      shopId: shopId,\n      products: productsByClassify,\n      clickClassify: clickClassify\n    });\n  };\n\n  return __jsx(React.Fragment, null, renderShops());\n};\n\nShopItems.defaultProps = {\n  classifiedId: null,\n  productId: null\n};\nexport default ShopItems;","map":null,"metadata":{},"sourceType":"module"}