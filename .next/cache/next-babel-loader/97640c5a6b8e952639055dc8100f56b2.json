{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport Router from 'next/router';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport useStore from '../../hooks/useStore';\nimport BasketsComp from '../../components/customercenter/Baskets';\n\nconst Baskets = () => {\n  const {\n    bascketStore,\n    itemsStore\n  } = useStore();\n  const {\n    glasses,\n    expendables\n  } = toJS(itemsStore);\n  const {\n    glassItems\n  } = toJS(bascketStore);\n  useEffect(() => {// Nothing. But to update component\n  }, [glasses, expendables]);\n\n  const convertItem = (items, type) => items.map(item => {\n    const itemInfo = itemsStore.getItemInfo({\n      type,\n      itemId: item.itemId,\n      specificationId: item.specificationItemId\n    });\n\n    if (!itemInfo) {\n      return null;\n    }\n\n    return _objectSpread(_objectSpread({}, itemInfo), {}, {\n      index: `${item.itemId}${item.specificationItemId}`,\n      count: item.count\n    });\n  }).filter(item => {\n    return !!item;\n  });\n\n  const openItem = (type, itemInfo) => {\n    Router.push({\n      pathname: '/shop',\n      query: {\n        id: `${type}`,\n        classifiedId: encodeURI(`${itemInfo.selectedItem.classify}`),\n        productId: `${itemInfo.selectedItem.id}`\n      }\n    });\n  };\n\n  const onClickRemove = (selectedItem, selectedSpecificItem) => {\n    bascketStore.removeBasket({\n      type: selectedItem.type,\n      itemId: selectedItem.id,\n      specificationItemId: selectedSpecificItem.id\n    });\n  };\n\n  return toJS(bascketStore) && __jsx(BasketsComp, {\n    glassItems: convertItem(glassItems.glass, 'glasses'),\n    glassStore: glasses,\n    expendableItems: convertItem(glassItems.expendables, 'expendables'),\n    expendableStore: expendables,\n    onClickRemove: onClickRemove,\n    openItem: openItem\n  });\n};\n\nexport default observer(Baskets);","map":null,"metadata":{},"sourceType":"module"}