{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport axios from 'axios';\nimport useStore from '../../hooks/useStore';\nimport ContactComp from '../../components/customercenter/Contact';\n\nconst Contact = () => {\n  const {\n    bascketStore,\n    itemsStore\n  } = useStore();\n  const {\n    glasses,\n    expendables\n  } = toJS(itemsStore);\n  const {\n    glassItems\n  } = toJS(bascketStore);\n  useEffect(() => {// Nothing. But to update component\n  }, [glasses, expendables]);\n\n  const convertItem = (items, type) => items.map(item => {\n    const itemInfo = itemsStore.getItemInfo({\n      type,\n      itemId: item.itemId,\n      specificationId: item.specificationItemId\n    });\n    return _objectSpread(_objectSpread({}, itemInfo), {}, {\n      count: item.count,\n      url: `http://kjglass.shop/shop?id=${type === 'glasses' ? 1 : 2}&classifiedId=${encodeURI(itemInfo.selectedItem.classify)}&productId=${item.itemId}`\n    });\n  });\n\n  const submitContact = async contactData => {\n    const {\n      email,\n      number\n    } = contactData;\n\n    if (email || number) {\n      alert('장바구니에 담긴 정보가 함께 전송 됩니다.');\n\n      try {\n        await axios.post('/translate-mail', {\n          contactData,\n          item: {\n            glass: convertItem(glassItems.glass, 'glasses'),\n            expendables: convertItem(glassItems.expendables, 'expendables')\n          }\n        });\n        alert('성공적으로 전송 되었습니다.');\n      } catch (error) {\n        alert(`에러가 발생 하였습니다${error}`);\n      }\n    } else {\n      alert('이메일 또는 전화번호를 남겨주세요.');\n    }\n  };\n\n  const openKakao = () => {\n    window.open('https://open.kakao.com/o/szj7uKQb');\n  };\n\n  return __jsx(ContactComp, {\n    submitContact: submitContact,\n    openKakao: openKakao\n  });\n};\n\nexport default observer(Contact);","map":null,"metadata":{},"sourceType":"module"}