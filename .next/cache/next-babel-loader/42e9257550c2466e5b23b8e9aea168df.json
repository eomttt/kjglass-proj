{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n/* eslint-disable prefer-destructuring */\nimport { observable, action, toJS } from 'mobx';\nlet BaskestStore = (_class = (_temp = class BaskestStore {\n  constructor() {\n    _initializerDefineProperty(this, \"glassItems\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"initBasket\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"addBasket\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"removeBasket\", _descriptor4, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"glassItems\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      glass: [],\n      expendables: []\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"initBasket\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      const glassLocalStorageItems = JSON.parse(localStorage.getItem('glass'));\n      const expendableLocalStorageItems = JSON.parse(localStorage.getItem('expendables'));\n      this.glassItems = {\n        glass: glassLocalStorageItems || [],\n        expendables: expendableLocalStorageItems || []\n      };\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"addBasket\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return params => {\n      const {\n        type,\n        itemId,\n        count,\n        specificationItemId,\n        classifiedId\n      } = params;\n      let itemType = type;\n\n      if (type.indexOf('expendables') > -1) {\n        itemType = type.split('_')[0];\n      }\n\n      const findedItem = this.glassItems[itemType] && this.glassItems[itemType].filter(item => {\n        const toJSItem = toJS(item);\n\n        if (toJSItem.itemId === itemId) {\n          if (toJSItem.specificationItemId === specificationItemId) {\n            return true;\n          }\n        }\n\n        return false;\n      })[0];\n\n      if (toJS(findedItem)) {\n        this.glassItems[itemType] = this.glassItems[itemType] && this.glassItems[itemType].map(item => {\n          const toJSItem = toJS(item);\n\n          if (toJSItem.itemId === itemId) {\n            if (toJSItem.specificationItemId === specificationItemId) {\n              return {\n                itemId: item.itemId,\n                count: Number(item.count) + Number(count),\n                specificationItemId: item.specificationItemId,\n                classifiedId\n              };\n            }\n          }\n\n          return item;\n        });\n      } else {\n        this.glassItems[itemType].push({\n          itemId,\n          count,\n          specificationItemId,\n          classifiedId\n        });\n      }\n\n      localStorage.setItem(itemType, JSON.stringify(toJS(this.glassItems[itemType])));\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"removeBasket\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return params => {\n      const {\n        type,\n        itemId,\n        specificationItemId\n      } = params;\n      let itemType = type;\n\n      if (type.indexOf('expendables') > -1) {\n        itemType = type.split('_')[0];\n      }\n\n      const findedItem = this.glassItems[itemType] && this.glassItems[itemType].filter(item => {\n        const toJSItem = toJS(item);\n\n        if (toJSItem.itemId === itemId) {\n          if (toJSItem.specificationItemId === specificationItemId) {\n            return true;\n          }\n        }\n\n        return false;\n      })[0];\n\n      if (toJS(findedItem)) {\n        this.glassItems[itemType] = this.glassItems[itemType].filter(item => {\n          const toJSItem = toJS(item);\n\n          if (toJSItem.itemId === itemId) {\n            if (toJSItem.specificationItemId === specificationItemId) {\n              return false;\n            }\n          }\n\n          return true;\n        });\n      }\n\n      localStorage.setItem(itemType, JSON.stringify(toJS(this.glassItems[itemType])));\n    };\n  }\n})), _class);\nexport { BaskestStore as default };","map":null,"metadata":{},"sourceType":"module"}