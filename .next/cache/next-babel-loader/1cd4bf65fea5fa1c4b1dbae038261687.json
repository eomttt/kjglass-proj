{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* eslint-disable no-restricted-syntax */\n\n/* eslint-disable no-await-in-loop */\n\n/* eslint-disable no-param-reassign */\nvar ALPHABET = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'undefined'];\n\nvar expendablesA = require('../data/expendables_A.json');\n\nvar expendablesB = require('../data/expendables_B.json');\n\nvar expendablesC = require('../data/expendables_C.json');\n\nvar expendablesD = require('../data/expendables_D.json');\n\nvar expendablesE = require('../data/expendables_E.json');\n\nvar expendablesF = require('../data/expendables_F.json');\n\nvar expendablesG = require('../data/expendables_G.json');\n\nvar expendablesH = require('../data/expendables_H.json');\n\nvar expendablesI = require('../data/expendables_I.json');\n\nvar expendablesJ = require('../data/expendables_J.json');\n\nvar expendablesL = require('../data/expendables_L.json');\n\nvar expendablesM = require('../data/expendables_M.json');\n\nvar expendablesO = require('../data/expendables_O.json');\n\nvar expendablesP = require('../data/expendables_P.json');\n\nvar expendablesR = require('../data/expendables_R.json');\n\nvar expendablesS = require('../data/expendables_S.json');\n\nvar expendablesT = require('../data/expendables_T.json');\n\nvar expendablesU = require('../data/expendables_U.json');\n\nvar expendablesUndefined = require('../data/expendables_undefined.json');\n\nvar expendablesV = require('../data/expendables_V.json');\n\nvar expendablesW = require('../data/expendables_W.json');\n\nvar expendablesZ = require('../data/expendables_Z.json');\n\nvar Data = {\n  A: expendablesA,\n  B: expendablesB,\n  C: expendablesC,\n  D: expendablesD,\n  E: expendablesE,\n  F: expendablesF,\n  G: expendablesG,\n  H: expendablesH,\n  I: expendablesI,\n  J: expendablesJ,\n  L: expendablesL,\n  M: expendablesM,\n  O: expendablesO,\n  P: expendablesP,\n  R: expendablesR,\n  S: expendablesS,\n  T: expendablesT,\n  U: expendablesU,\n  undefined: expendablesUndefined,\n  V: expendablesV,\n  W: expendablesW,\n  Z: expendablesZ\n};\nexport var getExpendables = function getExpendables() {\n  var result = [];\n\n  var _iterator = _createForOfIteratorHelper(ALPHABET),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var alphabet = _step.value;\n      var data = Data[alphabet];\n\n      if (data) {\n        result = [].concat(_toConsumableArray(result), _toConsumableArray(data));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n};\nexport var getExpendable = function getExpendable(alphabet, id) {\n  var datum = Data[alphabet];\n\n  if (datum) {\n    return datum.filter(function (item) {\n      return item.id === id;\n    })[0];\n  }\n\n  return {};\n};","map":null,"metadata":{},"sourceType":"module"}